// 정의
// JavaScript는 웹 페이지에서 복잡한 기능을 구현할 수 있는 스크립팅 또는 프로그래밍 언어입니다.
// 웹페이지가 단순히 정적인 정보를 표시하는 것 이상으로 시의적절한 콘텐츠 업데이트, 대화형 지도, 애니메이션,
// 2D/3D 그래픽, 스크롤링 비디오 주크박스 등을 표시할 때마다 JavaScript가 관련되어 있을 가능성이 높습니다.
// JavaScript는 표준 웹 기술이라는 케이크의 세 번째 층입니다.[ 다른 두 개는(HTML,CSS)]

// 다음은 HTML에서 글자를 바꾸는 간단한 JavaScript 로직입니다.
// querySelector를 통해서 "p" 태그를 가져옵니다.
const para = document.querySelector("p");

// 해당 객체에 click 이벤트를 추가합니다.
para.addEventListener("click", updateName);

// 현재 이름을 입력받은 이름으로 갱신하는 함수입니다.
function updateName() {
    // prompt를 통해서 사용자에서 입력을 받습니다.
    const name = prompt("Enter your name");
    // 이름을 입력받으면 'Player 1: 입력한 이름' 으로 갱신합니다.
    para.textContent = `Player 1: ${name}`;
}

// 클라이언트 사이드 JavaScript 언어의 핵심은 다음과 같은 일을 가능하게 해주는 프로그래밍 기능들로 구성됩니다.
// 1) 변수에 값을 저장할 수 있습니다. 바로 위의 예제를 보면, 새 이름을 입력하도록 요청하고 해당 이름을 name이라는 변수에 저장합니다.
// 2) 프로그래밍에서 "문자열(string)"이라고 부르는, 텍스트 조각을 조작합니다.
// 위 예제에서 문자열 "플레이어 1:" 과 name 변수의 값을 합쳐 온전한 텍스트 레이블("Player 1: Chris")을 생성합니다.
// 3) 웹 페이지에서 특정 이벤트에 대한 응답으로 코드를 실행합니다. 예제에서는 click 이벤트를 사용하여 레이블이 클릭된 시점을 감지한 다음 텍스트 레이블을 업데이트 하는 코드를 실행했습니다.
//
// 하지만 더욱 흥미로운 것은 클라이언트 측 JavaScript 언어 위에 구축된 기능입니다.
// 애플리케이션 프로그래밍 인터페이스(API)라고 부르는 이 기능들은 JavaScript 코드에서 사용할 수 있는 강력한 마법을 추가로 제공합니다.
//
//API는 개발자가 구현하기 어렵거나 불가능한 프로그램을 구현할 수 있도록 미리 만들어서 제공하는 것입니다. 기성품 가구 키트로 집을 짓는 것과 동일한 방식으로 프로그래밍할 수 있습니다.
// 직접 디자인을 구상하고, 올바른 목재를 찾고, 모든 패널을 올바른 크기와 모양으로 자르고,
// 올바른 크기의 나사를 찾아서 책장을 만드는 것보다 기성품 패널을 나사로 고정하여 책장을 만드는 것이 훨씬 쉽습니다.
// API는 일반적으로 두 개의 범주로 나뉩니다.
// 3rd party API
// Browser API

// 브라우저 API는 웹 브라우저에 내장되어 있으며, 주변 컴퓨터 환경의 데이터를 노출하거나 유용한 복잡한 작업을 수행할 수 있습니다.
// - DOM (Document Object Model) API를 사용하면 HTML과 CSS를 조작하여 HTML을 생성, 제거 및 변경하고 페이지에 새 스타일을 동적으로 적용하는 등의 작업을 수행할 수 있습니다.
// 예를 들어 페이지에 팝업 창이 나타나거나 새로운 콘텐츠가 표시될 때마다(위의 간단한 데모에서 보았듯이) DOM이 작동하는 것입니다.
// - Geolocation API로 지리정보를 가져올 수 있습니다. 이것이 Google 지도가 사용자의 위치를 찾아 지도에 표시하는 방법입니다.
// - Canvas와 WebGL API를 사용하면 애니메이션 2D 및 3D 그래픽을 만들 수 있습니다. 두 웹 기술을 사용해서 만들 수 있는 놀라운 결과를 엿보려면
// Chrome Experiments와 webglsamples를 방문하세요.
// - HTMLMediaElement와 WebRTC를 포함하는 오디오와 비디오 API를 사용하면 웹 페이지에서 바로 오디오 및 비디오를 재생하거나
// 웹 카메라에서 비디오를 가져와 다른 사람의 컴퓨터에 표시하는 등 멀티미디어로 정말 흥미로운 작업을 할 수 있습니다.
// (간단한 스냅샷 데모를 방문해서 감을 잡아보세요.)
//
// 서드파티 API는 기본적으로 브라우저에 내장되어 있지 않으며, 일반적으로 웹 어딘가에서 해당 코드와 정보를 가져와야 합니다.
// - Twitter API로 여러분의 최신 트윗을 웹 사이트가 보여주도록 구현할 수 있습니다.
// - Google 지도 API와 OpenStreetMap API로 웹 사이트에 지도를 삽입하고, 지도 관련 기능을 추가할 수 있습니다.
//
// 웹 페이지에서 JavaScript는 어떤 일을 하나요?
// 여기서는 실제로 몇 가지 코드를 살펴보면서 페이지에서 JavaScript를 실행하면 실제로 어떤 일이 일어나는지 살펴보겠습니다.
// 브라우저에서 웹 페이지를 로드할 때 어떤 일이 일어나는지 간단히 정리해 보겠습니다. (CSS 동작 방식에서 먼저 알아봤습니다.)
// 브라우저엣 웹 페이지를 로드하면 실행 환경(브라우저 탭)내에서 코드(HTML,CSS,JavaScript)를 실행하게 됩니다.
// 이는 원재료(코드)를 받아 제품(웹 페이지)을 출력하는 공장과 같습니다.
//
// JavaScript의 가장 일반적인 용도는 위에서 언급했듯이 DOM (Document Object Model) API를 통해 HTML과 CSS를 동적으로 수정하여 사용자 인터페이스를 업데이트하는 것입니다.
// 웹 문서의 코드는 일반적으로 페이지에 표시되는 순서대로 로드되고 실행됩니다.
// 수정하려는 HTML과 CSS 코드보다 JavaScript를 먼저 불러와 실행해버리면 오류가 발생할 수 있습니다.
// 이 글의 뒷부분에 있는 스크립트 로딩 전략에서 이 문제의 해결법을 알아보겠습니다.

// 브라우저 보안
// 각 브라우저 탭에는 코드를 실행할 수 있는 별도의 그릇이 있습니다. (전문 용어로 '실행 환경'이라고 부릅니다.)
// 대부분의 경우 각 탭의 코드는 완전히 독립적으로 실행되며 한 탭의 코드가 다른 탭이나 다른 웹사이트의 코드에 직접적인 영향을 미칠 수 없습니다.
// 이건 중요한 보안 절차입니다. 이런 제약이 없으면 해커들이 다른 웹사이트의 정보를 훔치는 코드를 작성하는 등 나쁜 짓을 할 수 있기 때문입니다.

// JavaScript 실행 순서
// 브라우저가 JavaScript 블록을 마주치면, 일반적으로는 순서대로 위에서 아래로 실행합니다. 따라서 코드 배치 순서에도 주의를 기울여야 합니다.

// 인터프리터와 컴파일러
// 프로그래밍에서는 인터프리터와 컴파일러라는 용어를 들어봤을 겁니다. 인터프리터를 사용하는 언어에서는 코드가 위에서 아래로 실행되고 코드 실행 결과가 즉시 반환됩니다.
// 브라우저에서 코드를 실행하기 전에 코드를 다른 형태로 변환할 필요가 없습니다. 코드는 프로그래머에게 친숙한 텍스트 형시으로 수신되어 바로 처리됩니다.

// 반면, 컴파일러를 사용하는 컴파일 언어는 컴퓨터에서 실행되기 전에 다른 형태로 변환(컴파일)됩니다.
// 예를 들어, C/C++에서는 코드를 컴파일러로 기계언어로 변환하여, 그 결과를 컴퓨터가 실행합니다.
// 프로그램은 프로그램의 원본 소스 코드에서 생성된 이진 형식(바이너리)으로부터 실행됩니다.

// JavaScript는 가볍고, 인터프리터를 사용하는 프로그래밍 언어입니다. 웹 브라우저는 JavaScript 코드를 원문 텍스트 형식으로 입력받아 실행합니다.
// 기술적인 측면으로 따지자면, 대부분의 모던 JavaScript 인터프리터들은 실제 성능 향상을 위해 JIT 컴파일(Just In Time 컴파일)이라는 기술을 사용하는데,
// 스크립트의 실행과 동시에 소스 코드를 더 빠르게 실행할 수 있는 이진 형태로 변환하여 최대한 높은 실행 속도를 얻는 방법입니다.
// 하지만 컴파일이 미리 처리되는 것이 아니라 런타입에 처리되기 떄문에 javaScript는 여전히 인터프리터 언어로 분류됩니다.

// 서버 사이드와 클라이언트 사이드 코드
// 웹 개발의 맥락에서 서버 사이드 코드와 클라이언트 사이드 코드를 들어봤을 것입니다.
// 클라이언트 사이드 코드는 사용자 컴퓨터에서 실행되는 코드로, 웹 페이지를 볼 대 페이지의 클라이언트 측 코드가 다운로드된 후 실행되어 브라우저에 표시됩니다.
// 이 과정에서 다루는 것은, 정확히는 클라이언트 사이드 JavaScript입니다.

// 반대로 서버 사이드 코드는 서버에서 실행되고 그 결과가 다운로드되어 브라우저에 표시됩니다. 인기 있는 서버 사이드 웹 언어로는 PHP,Phython, Ruby, ASP.NET, 그리고
// JavaScript가 있습니다.  JavaScript는 브라우저 뿐만 아니라, 많은 사람들이 사용하는 Node.js 환경처럼 서버 사이드 언어로도 사용할 수 있습니다.
// 서버 사이드 JavaScript에 관해서는 동적 웹 사이트 – 서버 사이드 프로그래밍 과정에서 더 알아보세요.

// 동적 코드와 정적 코드
// 동적이라는 단어는 클라이언트 사이드 JavaScript와 서버 사이드 언어를 모두 설명하는 데 사용되며,
// 웹 페이지/ 웹 앱의 디스플레이를 업데이트하여 상황에 따라 다른 내용을 표시하고 필요에 따라 새 콘텐츠를 생성하는 기능을 의미합니다.
// 서버 사이드 코드는 데이터베이스에서 데이터를 가져오는 등 서버에서 새 콘텐츠를 동적으로 생성하는 반면, 클라리언트 사이드 JavaScript는 새 HTML 표를 생성하고 서버에서 요청한 데이터로
// 채운 다음 사용자에게 표시되는 웹 페이지에 테이블을 표시하는 등 클라이언트 브라우저에서 새 콘텐츠를 동적으로 생성합니다.
// 두 가지 맥락에서 의미는 약간 다르지만 서로 연관되어 있으며 일반적으로 두 가지 접근 방식(서버와 클라이언트 사이드)이 함께 작동합니다.
//
// 동적으로 바뀌는 내용이 없는 웹 페이지를 정적인 페이지라고 하며, 항상 동일한 콘텐츠만 표시합니다.


// 웹 페이지에 JavaScript를 어떻게 넣나요?
// JavaScript는 CSS와 유사한 방식으로 HTML 페이지에 적용됩니다.
// CSS가 외부 스타일시트를 적용하는 데 <link> 요소를 사용하고 내부 스타일시트를 적용하는 데 <style> 요소를 사용하는 반면,
// JavaScript는 HTML의 세계에서 단 하나의 친구인 <script> 요소만 있으면 됩니다. 이것이 어떻게 작동하는지 알아봅시다.
//
// 스크립트 로딩 전략
// 스크립트를 적절한 시점에 불러오는 일에는 몇 가지 문제가 있습니다.
// 뭐든지 보이는 것만큼 간단하지는 않은 법이죠. 흔히 마주치게 되는 문제는,
// 페이지의 모든 HTML이 표시되는 순서대로 로드된다는 것입니다.
// JavaScript를 사용해서 페이지 내의 요소(더 정확하게는 Document Object Model)를 조작하려고 할 때,
// 해당 요소를 포함한 HTML 코드보다 JavaScript를 먼저 불러와버리면 코드가 올바르게 동작하지 못할 것입니다.
//
// 앞선 내부와 외부 JavaScript 예제에서는 HTML 본문을 읽기 전에 문서의 헤드에서 JavaScript를 불러와 실행합니다.
// 이 경우 오류가 발생할 수 있으므로 몇 가지 구문을 사용하여 문제를 해결했습니다.
// 내부 예제에서는 코드 주위에 이런 구조를 볼 수 있습니다.
// document.addEventListener("DOMContentLoaded", () => {
//     // …
// });
// 이건 이벤트, 그중에서도 HTML 본문 전체를 불러와 읽었다는 것을 나타내는 브라우저의 DOMContentLoaded 이벤트를 수신하는 이벤트 수신기입니다.
// 이 블록 내부의 JavaScript는 이벤트가 발생하기 전에는 실행되지 않으므로 로딩 시점으로 인한 오류를 예방할 수 있습니다. (이후 과정에서 이벤트에 대해 배우기를 참조하세요.)
// 외부 예제에서는 <script> 태그 요소에 도달하면 브라우저에 HTML 콘텐츠를 계속 다운로드하도록 지시하는 defer 속성이라는 보다 최신 JavaScript 기능을 사용하여 문제를 해결합니다.
// <script src="script.js" defer></script>
// 이 경우 스크립트와 HTML이 동시에 로드되어 코드가 작동합니다.
// 고전적인 방법은 스크립트 요소를 본문의 맨 마지막(</body> 태그 바로 앞)에 배치하는 것입니다.
// 그러면 모든 HTML을 읽은 후에 스크립트를 불러오게 됩니다.
// 이 방법의 문제는 HTML DOM을 모두 불러오기 전에는 스크립트의 로딩과 분석이 완전히 중단된다는 점입니다.
// 그래서 많은 스크립트를 포함하는 대형 사이트에서는 이로 인해 사이트 속도가 느려지는 중대한 성능 문제가 발생할 수 있습니다.

// async와 defer
// 스크립트 중단 문제를 해결할 수 있는 기능에는 사실 두 가지가 있습니다. async와 (위에서 본) defer입니다. 어떤 차이점이 있는지 알아봅시다.
// async 특성을 지정하면 스크립트를 가져오는 동안 페이지 로딩을 중단하지 않습니다. 그러나 다운로드가 끝나면 스크립트가 바로 실행되는데, 실행 도중에는 페이지 렌더링이 중단됩니다.
// 또한 스크립트의 순서를 보장할 방법은 없습니다. 따라서 async는 스크립트가 서로 독립적으로 실행되고, 다른 스크립트에 의존하지 않는 경우에 사용하는 것이 좋습니다.
// defer 속성으로 로드된 스크립트는 페이지에 표시되는 순서대로 로드됩니다. 또한 페이지 콘텐츠를 모두 불러오기 전까지는 실행되지 않으므로,
// 스크립트가 DOM의 위치에 의존하는 경우(예: 페이지에서 하나 이상의 요소를 수정하는 경우) 유용합니다.

// 예를 들어, 아래와 같이 세 개의 스크립트 요소를 가지고 있다고 가정해 보겠습니다.
// <script async src="js/vendor/jquery.js"></script>
// <script async src="js/script2.js"></script>
// <script async src="js/script3.js"></script>

// 위 코드로는 스크립트가 HTML의 순서대로 불러와질 것이라고 확실하게 예측할 수 없습니다.
// jquery.js가 script2.js 및 script3.js의 앞이나 뒤에 로드될 수 있으며,
// 이 경우 스크립트가 실행될 때 jquery가 정의되지 않기 때문에 jquery에 따라 해당 스크립트의 모든 함수가 오류를 발생시킬 수 있습니다.
// async는 로드할 백그라운드 스크립트가 많고 가능한 한 빨리 제자리에 배치하고 싶을 때 사용해야 합니다.
// 예를 들어 실제로 게임이 시작될 때 필요한 게임 데이터 파일을 로드해야 하지만 지금은 스크립트 로딩으로 인해 차단되지 않고 게임 인트로, 제목, 로비만 표시하고 싶다고 가정해 보겠습니다.

// defer 속성(아래 참조)을 사용하여 로드된 스크립트는 페이지에 표시되는 순서대로 실행되며 스크립트와 콘텐츠가 다운로드되는 즉시 실행됩니다:
// <script defer src="js/vendor/jquery.js"></script>
// <script defer src="js/script2.js"></script>
// <script defer src="js/script3.js"></script>
//
// 두 번째 예제에서는 jquery.js가 script2.js 및 script3.js보다 먼저 로드되고,
// script2.js가 script3.js보다 먼저 로드되는 것을 확인할 수 있습니다.
// 페이지 콘텐츠가 모두 로드될 때까지 실행되지 않으므로 스크립트가 DOM의 위치에 의존하는 경우(예: 페이지에서 하나 이상의 요소를 수정하는 경우) 유용합니다.
//
// 요약하자면,
// - async와 defer 모두 브라우저가 페이지의 다른 내용(DOM 등등)을 불러오는 동안 스크립트를 별도 스레드에서 불러오게 만듭니다. 덕분에 스크립트를 가져오는 동안 페이지 로딩이 중단되지 않습니다.
// - async 속성을 지정한 스크립트는 다운로드가 끝나는 즉시 실행합니다. 이렇게 하면 현재 페이지의 렌더링을 중단하며, 특정 실행 순서가 보장되지 않습니다.
// - defer 속성을 지정한 스크립트는 순서를 유지한 채로 가져오며 모든 콘텐츠를 다 불러온 이후에 실행합니다.
// - 스크립트를 즉시 실행해야 하고 종속성이 없는 경우 async를 사용하세요.
// - 다른 스크립트에 의존하거나 DOM 로딩이 필요한 스크립트에는 defer를 사용하여 스크립트를 로드하고, 원하는 순서에 맞춰서 <script> 요소를 배치하세요.

/* 주석
HTML 및 CSS와 마찬가지로 JavaScript 코드에서도 브라우저가 무시하는 주석을 작성할 수 있으며,
코드 작동 방식에 대한 지침을 동료 개발자(아니면 6개월 후에 코드를 다시 살펴보고 무엇을 했는지 기억이 나지 않는 여러분)에게 제공하기 위해 존재합니다.
주석은 매우 유용하며, 특히 규모가 큰 애플리케이션의 경우 자주 사용해야 합니다. 주석에는 두 종류가 있습니다.
한 줄 짜리 주석은 맨 앞에 이중 빗금(//)으로 작성합니다.
// 나, 주석
// 여러 줄 주석은 /*과 의 사이에 작성합니다.

그래서, 마지막으로 봤던 JavaScript 예제 코드에 주석을 추가한다면 이런 모습이 되겠죠.
*/









