// 정의
// JavaScript는 웹 페이지에서 복잡한 기능을 구현할 수 있는 스크립팅 또는 프로그래밍 언어입니다.
// 웹페이지가 단순히 정적인 정보를 표시하는 것 이상으로 시의적절한 콘텐츠 업데이트, 대화형 지도, 애니메이션,
// 2D/3D 그래픽, 스크롤링 비디오 주크박스 등을 표시할 때마다 JavaScript가 관련되어 있을 가능성이 높습니다.
// JavaScript는 표준 웹 기술이라는 케이크의 세 번째 층입니다.[ 다른 두 개는(HTML,CSS)]

// 다음은 HTML에서 글자를 바꾸는 간단한 JavaScript 로직입니다.
// querySelector를 통해서 "p" 태그를 가져옵니다.
const para = document.querySelector("p");

// 해당 객체에 click 이벤트를 추가합니다.
para.addEventListener("click", updateName);

// 현재 이름을 입력받은 이름으로 갱신하는 함수입니다.
function updateName() {
    // prompt를 통해서 사용자에서 입력을 받습니다.
    const name = prompt("Enter your name");
    // 이름을 입력받으면 'Player 1: 입력한 이름' 으로 갱신합니다.
    para.textContent = `Player 1: ${name}`;
}

// 클라이언트 사이드 JavaScript 언어의 핵심은 다음과 같은 일을 가능하게 해주는 프로그래밍 기능들로 구성됩니다.
// 1) 변수에 값을 저장할 수 있습니다. 바로 위의 예제를 보면, 새 이름을 입력하도록 요청하고 해당 이름을 name이라는 변수에 저장합니다.
// 2) 프로그래밍에서 "문자열(string)"이라고 부르는, 텍스트 조각을 조작합니다.
// 위 예제에서 문자열 "플레이어 1:" 과 name 변수의 값을 합쳐 온전한 텍스트 레이블("Player 1: Chris")을 생성합니다.
// 3) 웹 페이지에서 특정 이벤트에 대한 응답으로 코드를 실행합니다. 예제에서는 click 이벤트를 사용하여 레이블이 클릭된 시점을 감지한 다음 텍스트 레이블을 업데이트 하는 코드를 실행했습니다.
//
// 하지만 더욱 흥미로운 것은 클라이언트 측 JavaScript 언어 위에 구축된 기능입니다.
// 애플리케이션 프로그래밍 인터페이스(API)라고 부르는 이 기능들은 JavaScript 코드에서 사용할 수 있는 강력한 마법을 추가로 제공합니다.
//
//API는 개발자가 구현하기 어렵거나 불가능한 프로그램을 구현할 수 있도록 미리 만들어서 제공하는 것입니다. 기성품 가구 키트로 집을 짓는 것과 동일한 방식으로 프로그래밍할 수 있습니다.
// 직접 디자인을 구상하고, 올바른 목재를 찾고, 모든 패널을 올바른 크기와 모양으로 자르고,
// 올바른 크기의 나사를 찾아서 책장을 만드는 것보다 기성품 패널을 나사로 고정하여 책장을 만드는 것이 훨씬 쉽습니다.
// API는 일반적으로 두 개의 범주로 나뉩니다.
// 3rd party API
// Browser API

// 브라우저 API는 웹 브라우저에 내장되어 있으며, 주변 컴퓨터 환경의 데이터를 노출하거나 유용한 복잡한 작업을 수행할 수 있습니다.
// - DOM (Document Object Model) API를 사용하면 HTML과 CSS를 조작하여 HTML을 생성, 제거 및 변경하고 페이지에 새 스타일을 동적으로 적용하는 등의 작업을 수행할 수 있습니다.
// 예를 들어 페이지에 팝업 창이 나타나거나 새로운 콘텐츠가 표시될 때마다(위의 간단한 데모에서 보았듯이) DOM이 작동하는 것입니다.
// - Geolocation API로 지리정보를 가져올 수 있습니다. 이것이 Google 지도가 사용자의 위치를 찾아 지도에 표시하는 방법입니다.
// - Canvas와 WebGL API를 사용하면 애니메이션 2D 및 3D 그래픽을 만들 수 있습니다. 두 웹 기술을 사용해서 만들 수 있는 놀라운 결과를 엿보려면
// Chrome Experiments와 webglsamples를 방문하세요.
// - HTMLMediaElement와 WebRTC를 포함하는 오디오와 비디오 API를 사용하면 웹 페이지에서 바로 오디오 및 비디오를 재생하거나
// 웹 카메라에서 비디오를 가져와 다른 사람의 컴퓨터에 표시하는 등 멀티미디어로 정말 흥미로운 작업을 할 수 있습니다.
// (간단한 스냅샷 데모를 방문해서 감을 잡아보세요.)
//
// 서드파티 API는 기본적으로 브라우저에 내장되어 있지 않으며, 일반적으로 웹 어딘가에서 해당 코드와 정보를 가져와야 합니다.
// - Twitter API로 여러분의 최신 트윗을 웹 사이트가 보여주도록 구현할 수 있습니다.
// - Google 지도 API와 OpenStreetMap API로 웹 사이트에 지도를 삽입하고, 지도 관련 기능을 추가할 수 있습니다.
//
// 웹 페이지에서 JavaScript는 어떤 일을 하나요?
// 여기서는 실제로 몇 가지 코드를 살펴보면서 페이지에서 JavaScript를 실행하면 실제로 어떤 일이 일어나는지 살펴보겠습니다.
// 브라우저에서 웹 페이지를 로드할 때 어떤 일이 일어나는지 간단히 정리해 보겠습니다. (CSS 동작 방식에서 먼저 알아봤습니다.)
// 브라우저엣 웹 페이지를 로드하면 실행 환경(브라우저 탭)내에서 코드(HTML,CSS,JavaScript)를 실행하게 됩니다.
// 이는 원재료(코드)를 받아 제품(웹 페이지)을 출력하는 공장과 같습니다.
//
// JavaScript의 가장 일반적인 용도는 위에서 언급했듯이 DOM (Document Object Model) API를 통해 HTML과 CSS를 동적으로 수정하여 사용자 인터페이스를 업데이트하는 것입니다.
// 웹 문서의 코드는 일반적으로 페이지에 표시되는 순서대로 로드되고 실행됩니다.
// 수정하려는 HTML과 CSS 코드보다 JavaScript를 먼저 불러와 실행해버리면 오류가 발생할 수 있습니다.
// 이 글의 뒷부분에 있는 스크립트 로딩 전략에서 이 문제의 해결법을 알아보겠습니다.

// 브라우저 보안
// 각 브라우저 탭에는 코드를 실행할 수 있는 별도의 그릇이 있습니다. (전문 용어로 '실행 환경'이라고 부릅니다.)
// 대부분의 경우 각 탭의 코드는 완전히 독립적으로 실행되며 한 탭의 코드가 다른 탭이나 다른 웹사이트의 코드에 직접적인 영향을 미칠 수 없습니다.
// 이건 중요한 보안 절차입니다. 이런 제약이 없으면 해커들이 다른 웹사이트의 정보를 훔치는 코드를 작성하는 등 나쁜 짓을 할 수 있기 때문입니다.

// JavaScript 실행 순서
// 브라우저가 JavaScript 블록을 마주치면, 일반적으로는 순서대로 위에서 아래로 실행합니다. 따라서 코드 배치 순서에도 주의를 기울여야 합니다.

// 인터프리터와 컴파일러
// 프로그래밍에서는 인터프리터와 컴파일러라는 용어를 들어봤을 겁니다. 인터프리터를 사용하는 언어에서는 코드가 위에서 아래로 실행되고 코드 실행 결과가 즉시 반환됩니다.
// 브라우저에서 코드를 실행하기 전에 코드를 다른 형태로 변환할 필요가 없습니다. 코드는 프로그래머에게 친숙한 텍스트 형시으로 수신되어 바로 처리됩니다.

// 반면, 컴파일러를 사용하는 컴파일 언어는 컴퓨터에서 실행되기 전에 다른 형태로 변환(컴파일)됩니다.
// 예를 들어, C/C++에서는 코드를 컴파일러로 기계언어로 변환하여, 그 결과를 컴퓨터가 실행합니다.
// 프로그램은 프로그램의 원본 소스 코드에서 생성된 이진 형식(바이너리)으로부터 실행됩니다.

// JavaScript는 가볍고, 인터프리터를 사용하는 프로그래밍 언어입니다. 웹 브라우저는 JavaScript 코드를 원문 텍스트 형시









